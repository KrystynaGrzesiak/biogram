% Generated by roxygen2 (4.0.1): do not edit by hand
\name{count_ngrams}
\alias{count_ngrams}
\title{Detect and count n-grams in single sequence}
\usage{
count_ngrams(seq, n, u, d = 0, pos = FALSE, scale = FALSE,
  threshold = 0)
}
\arguments{
\item{seq}{\code{integer} vector describing sequence.}

\item{n}{size of n-grams.}

\item{u}{unigrams (\code{integer}, \code{numeric} or \code{character} vector).}

\item{d}{distance between elements of n-gram (0 means consecutive elements). See
Details.}

\item{pos}{\code{logical}, if \code{TRUE} n_grams contains position information.}

\item{scale}{\code{logical}, if \code{TRUE} output data is normalized.}
}
\value{
a named \code{integer} vector. Elements of n-gram are separated by dot.
}
\description{
Counts all n-grams present in given sequence.
}
\details{
The length of \code{distance} vector should be always n - 1. For example
when \code{n} = 3, \code{d} = c(1, 2) means A_A__A. For \code{n} = 4,
\code{d} = c(2, 0, 1) means A__AA_A.
}
\note{
List of possible n-grams must be calculated outside of the function.

does not work: n = 1 and dist != 0
}
\examples{
#trigrams for nucleotides
count_ngrams(sample(1L:4, 50, replace = TRUE), 3, 1L:4, pos = TRUE)
#multigrams
seqs <- matrix(sample(1L:4, 600, replace = TRUE), ncol = 50)
count_ngrams(seqs, c(1, 2, 3), 1L:4, pos = TRUE)
}
\seealso{
For convenient wrapper for multidistance calculations
see \code{\link{gramize_data}}.
}

